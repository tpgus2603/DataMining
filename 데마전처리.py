# -*- coding: utf-8 -*-
"""데마전처리.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BXCCejjYKHY9mRIPhqvjz3KDKrdswU38
"""

from google.colab import drive
drive.mount('/content/drive')



import pandas as pd
import json

# 1. Read JSON file
file_path = "/content/drive/MyDrive/json_csv_files/amazon_review/Amazon_Fashion_10K.json"  # JSON file path
category_value = "Amazon_Fashion"  # Category to be added
df = pd.read_json(file_path)

import json

# 파일 경로
file_path = "/content/drive/MyDrive/json_csv_files/amazon_review/Amazon_Fashion_10K.json"
output_path = "/content/drive/MyDrive/json_csv_files/amazon_review/Amazon_Fashion_fixed.json"

try:
    # 원본 파일 읽기
    with open(file_path, 'r') as file:
        raw_data = file.read()

    # 각 JSON 객체를 분리
    json_objects = raw_data.split('} {')

    # 각 객체를 수정하여 쉼표와 배열 추가
    fixed_data = '[' + '},{'.join(json_objects) + ']'

    # JSON 데이터 유효성 검증
    parsed_data = json.loads(fixed_data)

    # 수정된 JSON 파일 저장
    with open(output_path, 'w') as file:
        json.dump(parsed_data, file, indent=4)

    print("JSON 파일이 성공적으로 수정되고 저장되었습니다.")

except Exception as e:
    print(f"오류 발생: {e}")

# 2. Add new column with the same value for all rows
df['category'] = category_value

# 3. Save the updated DataFrame back to a JSON file
df.to_json(file_path, orient='records', indent=4)

print("Updated JSON data saved successfully.")

import pandas as pd
import json
import re

# 파일 경로 설정
file_path = "/content/drive/MyDrive/json_csv_files/amazon_review/Electronics_10K.json"

# 데이터 리스트를 저장할 빈 리스트 생성
data_list = []

# 파일 읽기
with open(file_path, 'r', encoding='utf-8') as file:
    raw_data = file.read()

    # 중괄호로 시작하는 곳을 기준으로 데이터 분리
    json_strings = re.findall(r'\{.*?\}(?=\s*\{|\s*$)', raw_data, re.DOTALL)

    # 각 JSON 문자열을 파싱하여 리스트에 추가
    for json_str in json_strings:
        try:
            data = json.loads(json_str)
            data_list.append(data)
        except json.JSONDecodeError as e:
            print(f"JSON 디코딩 에러: {e}")
            continue

# 데이터 리스트를 DataFrame으로 변환
df = pd.DataFrame(data_list)

# 새로운 열 추가 (예: category)
df['category'] = 'Electronics'
df.drop(columns=['images'], inplace=True)
# 결과 확인
print(df.head())

# 필요에 따라 DataFrame을 다시 JSON 파일로 저장
output_path = "/content/drive/MyDrive/json_csv_files/amazon_review/Electronics.json"
df.to_json(output_path, orient='records', indent=4)

print("DataFrame이 성공적으로 생성되고 저장되었습니다.")



"""하나의 데이터로 합치기

"""

import pandas as pd
import os
# JSON 파일들이 위치한 디렉토리 경로
json_dir = "/content/drive/MyDrive/json_csv_files/amazon_review/"
# 합칠 A 타입 JSON 파일 리스트
a_type_files = [
    "Video_Games.json",
    "Sports_Outdoors.json",
    "Software.json",
    "Music.json",  # 공백 제거
    "Movies_TV.json",
    "Grocery_Gourmet_Food.json",
    "Fashion.json",
    "Electronics.json",
    "Car.json",
    "Beauty.json"
]
# A 타입 데이터를 저장할 리스트 초기화
a_dfs = []

for file in a_type_files:
    file_path = os.path.join(json_dir, file)

    # A 타입 JSON 파일 읽기
    try:
        a_df = pd.read_json(file_path, lines=True)
    except ValueError:
        # JSON 파일이 여러 줄로 되어있지 않은 경우
        a_df = pd.read_json(file_path)

    # 파일명 확인 및 로드 여부 확인
    print(f"Loaded {file}: {a_df.shape[0]} records")

    # A 타입 데이터 리스트에 추가
    a_dfs.append(a_df)

# 모든 A 타입 데이터프레임을 하나로 합치기
combined_a_df = pd.concat(a_dfs, ignore_index=True)
print(f"Combined A type data shape: {combined_a_df.shape}")

# 메타데이터 파일 경로
metadata_path = os.path.join(json_dir, "metadata.json")

# 메타데이터 읽기
metadata_df = pd.read_json(metadata_path, lines=True)

# 'title' 컬럼명을 'product_title'로 변경
metadata_df = metadata_df.rename(columns={'title': 'product_title'})

# 필요한 컬럼만 선택
metadata_df = metadata_df[['parent_asin', 'product_title']]

print(f"Metadata shape: {metadata_df.shape}")

# A 타입 데이터와 B 타입 메타데이터 병합 (inner join)
merged_df = combined_a_df.merge(
    metadata_df,
    left_on='asin',
    right_on='parent_asin',
    how='inner'
)

# 필요 없어진 'parent_asin' 컬럼 제거
merged_df = merged_df.drop(columns=['parent_asin_x'])
merged_df = merged_df.drop(columns=['parent_asin_y'])

print(f"Merged data shape: {merged_df.shape}")

output_json_path = os.path.join(json_dir, "combined_data2.json")
merged_df.to_json(output_json_path, orient='records', lines=True)
print(f"Combined data saved to {output_json_path}")